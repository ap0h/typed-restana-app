{
  "openapi": "3.0.3",
  "info": {
    "title": "Type-Safe Restana API with Zod",
    "version": "1.0.0",
    "description": "Type-safe REST API built with Restana and Zod validation. Demonstrates compile-time type safety, automatic validation, and OpenAPI generation.",
    "contact": {
      "name": "API Team",
      "email": "api@example.com"
    },
    "license": {
      "name": "MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    },
    {
      "url": "https://api.example.com",
      "description": "Production server"
    }
  ],
  "paths": {
    "/api/users": {
      "get": {
        "summary": "List users with filtering",
        "description": "Retrieve a paginated list of users with optional filtering by name, age, and activity status",
        "operationId": "getUserList",
        "tags": [
          "Users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$schema": "http://json-schema.org/draft-07/schema#"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$schema": "http://json-schema.org/draft-07/schema#"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$schema": "http://json-schema.org/draft-07/schema#"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new user",
        "description": "Create a new user account with email, name, and optional age",
        "operationId": "createUser",
        "tags": [
          "Users"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$schema": "http://json-schema.org/draft-07/schema#"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$schema": "http://json-schema.org/draft-07/schema#"
                }
              }
            }
          },
          "409": {
            "description": "User with this email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$schema": "http://json-schema.org/draft-07/schema#"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "$schema": "http://json-schema.org/draft-07/schema#"
              }
            }
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "summary": "Get user by ID",
        "description": "Retrieve detailed information about a specific user",
        "operationId": "getUserById",
        "tags": [
          "Users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$schema": "http://json-schema.org/draft-07/schema#"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$schema": "http://json-schema.org/draft-07/schema#"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$schema": "http://json-schema.org/draft-07/schema#"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update user",
        "description": "Update user information by ID",
        "operationId": "updateUser",
        "tags": [
          "Users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$schema": "http://json-schema.org/draft-07/schema#"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$schema": "http://json-schema.org/draft-07/schema#"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$schema": "http://json-schema.org/draft-07/schema#"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "$schema": "http://json-schema.org/draft-07/schema#"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user",
        "description": "Delete a user by ID",
        "operationId": "deleteUser",
        "tags": [
          "Users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$schema": "http://json-schema.org/draft-07/schema#"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$schema": "http://json-schema.org/draft-07/schema#"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get user by ID",
        "tags": [
          "Users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$schema": "http://json-schema.org/draft-07/schema#"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {}
  }
}